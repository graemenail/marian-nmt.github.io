
.. _program_listing_file_src_training_graph_group.h:

Program Listing for File graph_group.h
======================================

|exhale_lsh| :ref:`Return to documentation for file <file_src_training_graph_group.h>` (``src/training/graph_group.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "common/definitions.h"
   #include "common/options.h"
   #include "data/batch_generator.h"
   #include "graph/expression_graph.h"
   #include "models/model_base.h"
   #include "optimizers/optimizers.h"
   #include "training/scheduler.h"
   #include "training/communicator.h"
   
   namespace marian {
   
   class GraphGroup {
   protected:
     Ptr<Options> options_;
     Ptr<OptimizerBase> opt_;   // the optimizer
   
     Ptr<Scheduler> scheduler_; // scheduler that keeps track of how much has been processed
   
     bool finalized_{false};    // 'true' if training has completed (further updates are no longer allowed)
     size_t typicalTrgBatchWords_{0}; // for dynamic batch sizing: typical batch size in words
   
     // determines the number of input streams (i.e. input files or fields in the TSV input) that need
     // to be included in the batch, i.e. without alignments and weights
     size_t numberOfInputFiles();
   
   public:
     GraphGroup(Ptr<Options> options);
   
     virtual ~GraphGroup() {}
   
     virtual void update(Ptr<data::Batch> batch) = 0;
   
     virtual void load() = 0;
   
     virtual void save(bool isFinal = false) = 0;
   
     void validate();
   
     virtual void finalize();
   
     virtual void setScheduler(Ptr<Scheduler> scheduler) = 0;
   
     // @TODO: Can this be made const? It seems wrong to have a stateful method that still returns a result.
     Ptr<data::BatchStats> collectStats(Ptr<ExpressionGraph> graph,
                                        Ptr<models::ICriterionFunction> model,
                                        const std::vector<Ptr<Vocab>>& vocabs,
                                        double multiplier = 1.);
   
     void setTypicalTrgBatchWords(size_t typicalTrgBatchWords);
   };
   
   }  // namespace marian
