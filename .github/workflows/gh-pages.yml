name: Website

on:
  push:
    branches:
      - content

env:
  SITE: live
  gcc: 7
  cuda: "11.2"


jobs:
  # ------------------------------------------------------------------
  # Check if marian submodule was updated
  # ------------------------------------------------------------------
  check_source:
      name: Check for source changes
      outputs:
        changed: ${{ steps.check.outputs.changed }}
      runs-on: ubuntu-latest
      steps:
        - name: Checkout source code
          uses: actions/checkout@v2

        - name: Determine changes since last event
          id: check
          env:
            ref: ${{ github.event.before }}
          run: |
            if [ -z "${{ env.ref }}" ]; then
              echo '::set-output name=changed::true';
            else
              git fetch origin ${{ env.ref }} --depth=1
              git diff --name-only ${{ env.ref }}.. | grep '^marian-dev' && \
                echo '::set-output name=changed::true' || true
            fi

  # ------------------------------------------------------------------
  # Compile Marian to get CLI options
  # ------------------------------------------------------------------
  cli:
    name: Build CLI documentation
    needs: [check_source]
    # if: needs.check_source.outputs.changed == 'true'
    defaults:
      run:
        working-directory: marian-dev
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install dependencies
        run: |
          sudo apt-get update -y && \
          sudo apt-get install -y ccache libboost-all-dev libgoogle-perftools-dev \
            libprotobuf-dev protobuf-compiler

      # - name: Install MKL
      # run: |
      #   wget -qO- "https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB" | sudo apt-key add -
      #   sudo sh -c "echo deb https://apt.repos.intel.com/mkl all main > /etc/apt/sources.list.d/intel-mkl.list"
      #   sudo apt-get update -o Dir::Etc::sourcelist="/etc/apt/sources.list.d/intel-mkl.list"
      #   sudo apt-get install -y --no-install-recommends intel-mkl-64bit-2020.0-088

      - name: Install CUDA
        run: |
          ./scripts/ci/install_cuda_ubuntu.sh ${{ env.cuda }}
          ls -valpsh /usr/local/

    # - name: Configure CMake
    #   run: |
    #     export LDFLAGS="-L/usr/local/opt/openblas/lib"
    #     export CPPFLAGS="-I/usr/local/opt/openblas/include"
    #     mkdir -p build
    #     cd build
    #     cmake .. \
    #       -DCOMPILE_CPU=on \
    #       -DCOMPILE_CUDA=off \
    #       -DCOMPILE_EXAMPLES=on \
    #       -DCOMPILE_SERVER=on \
    #       -DCOMPILE_TESTS=on \
    #       -DUSE_FBGEMM=on \
    #       -DUSE_SENTENCEPIECE=on \
    #       -DUSE_STATIC_LIBS=off

      - name: Configure CMake
        run: |
          mkdir -p build
          cd build
          CC=/usr/bin/gcc-${{ env.gcc }} CXX=/usr/bin/g++-${{ env.gcc }} CUDAHOSTCXX=/usr/bin/g++-${{ env.gcc }} \
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DUSE_CCACHE=ON \
            -DCOMPILE_CPU=ON \
            -DCOMPILE_CUDA=ON \
            -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-11.2/ \
            -DCOMPILE_SERVER=ON \
            -DCOMPILE_EXAMPLES=OFF \
            -DCOMPILE_TESTS=OFF \
            -DUSE_FBGEMM=ON \
            -DUSE_SENTENCEPIECE=ON \
            -DUSE_STATIC_LIBS=OFF

      - name: Set up cache for ccache
        uses: actions/cache@v2
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{ hashFiles('marian-dev/VERSION') }}
          restore-keys: |
            ${{ runner.os }}-ccache

      - name: Compile
        working-directory: marian-dev/build
        run: make -j2

      - name: Get Version
        working-directory: marian-dev/build
        run: |
          mkdir -p cli
          for cmd in marian marian-{decoder,server,scorer,vocab,conv}; do
            ./${cmd} --version | tee cli/${cmd}.version
            ./${cmd} --help | tee cli/${cmd}.md
          done

          ls -valphs
          ls -valphs cli/

      # This artifact contains the HTML output of Sphinx only.
      # With index.html at the root of the produced zip file.
      - name: Upload CLI
        uses: actions/upload-artifact@v2
        with:
          name: cli-output
          path: marian-dev/build/cli

  # ------------------------------------------------------------------
  # Build website source
  # ------------------------------------------------------------------
  site:
    name: Build website
    needs: [cli]
    if: ${{ !failure() }}  # skipped needs are fine, but failures are not
    runs-on: ubuntu-latest
    steps:
      - name: Checkout website source
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7

      - name: Build Jekyll
        uses: limjh16/jekyll-action-ts@v2
        with:
          enable_cache: true
          custom_opts: '--baseurl /${{ github.event.repository.name }}'

      # This artifact contains the HTML output of Sphinx only.
      # With index.html at the root of the produced zip file.
      - name: Upload documentation
        uses: actions/upload-artifact@v2
        with:
          name: jekyll-output
          path: ./_site

# Generates API docs
  api:
    name: Build API documentation
    needs: [check_source]
    if: needs.check_source.outputs.changed == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: marian-dev
    steps:
      - name: Checkout website source
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Set up Doxygen
        run: sudo apt-get install -y doxygen

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Set up dependency cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles(' marian-dev/doc/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        working-directory: ./marian-dev/doc
        run: pip install -r requirements.txt

      - name: Build documentation
        working-directory: ./marian-dev/doc
        run: make html

      # This artifact contains the HTML output of Sphinx only.
      # With index.html at the root of the produced zip file.
      - name: Upload documentation
        uses: actions/upload-artifact@v2
        with:
          name: api-docs-output
          path: ./marian-dev/doc/build/html


# Deploy to branch
  deploy:
    name: Deploy to live branch
    needs: [site, api, cli]
    if: ${{ !failure() }}  # skipped needs are fine, but failures are not
    runs-on: ubuntu-latest
    steps:
      - run: echo 'Good to go!'


      # - name: Install
      #   uses: limjh16/jekyll-action-ts@v2
      #   with:
      #     enable_cache: true
      #     custom_opts: '--baseurl /${{ github.event.repository.name }}'
      #
      # - name: Cache HTML
      #   uses: actions/cache@v2
      #   with:
      #     path: ~/._site
      #     key: jekyll
      #   restore-keys: |
      #     jekyll
      #
      # - name: Deploy
      #   uses: peaceiris/actions-gh-pages@v3
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     publish_dir: ./_site
      #     publish_branch: gh-pages
      #     enable_jekyll: false # prevents GitHub running Jekyll
