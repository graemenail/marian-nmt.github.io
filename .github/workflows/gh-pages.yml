name: Website

on:
  push:
    branches:
      - content

  workflow_dispatch:

env:
  source: content
  deploy: live
  gcc: 7
  cuda: "11.2"


jobs:
  # Check if marian submodule was updated
  check_source:
      name: Check for source changes
      outputs:
        changed: ${{ steps.check.outputs.changed }}
      runs-on: ubuntu-latest
      steps:
        - name: Checkout source code
          uses: actions/checkout@v2

        - name: Determine changes since last event
          id: check
          env:
            ref: ${{ github.event.before }}
          run: |
            if [ -z "${{ env.ref }}" ]; then
              echo '::set-output name=changed::true';
            else
              git fetch origin ${{ env.ref }} --depth=1
              git diff --name-only ${{ env.ref }}.. | grep '^marian-dev' && \
                echo '::set-output name=changed::true' || true
            fi

            # Always run on workflow_dispatch
            if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
              echo '::set-output name=changed::true';
            fi

  # Compile Marian to get CLI options
  cli:
    name: Build CLI documentation
    defaults:
      run:
        working-directory: marian-dev
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Get marian submodule SHA
        id: version
        run: |
          echo "::set-output name=sha::$(git rev-parse HEAD)"

      - name: Set up cache for marian output
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            marian-dev/build/marian*.version
            marian-dev/build/marian*.help
          key: v2-${{ runner.os }}-${{ steps.version.outputs.sha }}

      # Only compile if the cache is expired
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update -y && \
          sudo apt-get install -y libboost-all-dev \
            libgoogle-perftools-dev libprotobuf-dev protobuf-compiler

      - name: Install CUDA
        if: steps.cache.outputs.cache-hit != 'true'
        run: ./scripts/ci/install_cuda_ubuntu.sh ${{ env.cuda }}

      - name: Configure CMake
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          mkdir build && cd build
          CC=/usr/bin/gcc-${{ env.gcc }} \
          CXX=/usr/bin/g++-${{ env.gcc }} \
          CUDAHOSTCXX=/usr/bin/g++-${{ env.gcc }} \
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DCOMPILE_CPU=ON \
            -DCOMPILE_CUDA=ON \
            -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-${{ env.cuda }}/ \
            -DCOMPILE_SERVER=ON \
            -DCOMPILE_EXAMPLES=OFF \
            -DCOMPILE_TESTS=OFF \
            -DUSE_FBGEMM=ON \
            -DUSE_SENTENCEPIECE=ON \
            -DUSE_STATIC_LIBS=OFF

      - name: Compile
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: marian-dev/build
        run: make -j2

      - name: Output Version and Help
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: marian-dev/build
        run: |
          for cmd in marian marian-{decoder,server,scorer,vocab,conv}; do
            ./${cmd} --version > ${cmd}.version 2>&1
            ./${cmd} --help > ${cmd}.help 2>&1
          done

      # Create markdown output
      - name: Process Version and Help
        working-directory: .
        env:
          marian: 'marian-dev/build'
          doc: 'docs/cmd'
        run: |
          for cmd in marian marian-{decoder,server,scorer,vocab,conv}; do
            output="${{ env.doc }}/${cmd}.md"
            sed "s/<COMMAND>/${cmd}/" ${{ env.doc }}/_template.tmp > ${output}
            echo "Version: " >> ${output}
            cat ${{ env.marian }}/${cmd}.version >> ${output} 2>&1
            echo "" >> ${output}
            cat ${{ env.marian }}/${cmd}.help 2>&1 | bash _scripts/help2markdown.sh | python _scripts/wrap_help.py >> ${output}
          done

      # Generate artifact containing the markdown output for each marian command
      - name: Upload CLI
        uses: actions/upload-artifact@v2
        with:
          name: cli-output
          path: docs/cmd/marian*.md
          retention-days: 5

  # Build website source
  site:
    name: Build website
    needs: [cli]
    if: ${{ !failure() }}  # skipped needs are fine, but failures are not
    runs-on: ubuntu-latest
    steps:
      - name: Checkout website source
        uses: actions/checkout@v2
        with:
          ref: ${{ env.source }}
          submodules: true

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7

      # Incorporate CLI
      - name: Download new CLI
        if: needs.cli.result == 'success'
        uses: actions/download-artifact@v2
        with:
          name: cli-output
          path: docs/cmd

      # Could commit the markdown to Jekyll source?
      # - name: Commit CLI
      #   if: needs.cli.result == 'success'
      #   working-directory: docs/cmd
      #   run: |
      #     git diff
      #     git add *.md
      #     git status

      - name: Build Jekyll
        uses: limjh16/jekyll-action-ts@v2
        with:
          enable_cache: true
          ## enable to test in a fork
          custom_opts: '--baseurl /${{ github.event.repository.name }}'

      # This artifact contains the HTML output of Sphinx only.
      # With index.html at the root of the produced zip file.
      - name: Upload HTML
        uses: actions/upload-artifact@v2
        with:
          name: jekyll-output
          path: ./_site
          retention-days: 5

  # Generates API docs
  api:
    name: Build API documentation
    needs: [check_source]
    if: needs.check_source.outputs.changed == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: marian-dev
    steps:
      - name: Checkout website source
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Set up Doxygen
        run: sudo apt-get install -y doxygen

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Set up dependency cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('marian-dev/doc/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        working-directory: ./marian-dev/doc
        run: pip install -r requirements.txt

      - name: Build documentation
        working-directory: ./marian-dev/doc
        run: make html

      # This artifact contains the HTML output of Sphinx only.
      # With index.html at the root of the produced zip file.
      - name: Upload documentation
        uses: actions/upload-artifact@v2
        with:
          name: api-docs-output
          path: ./marian-dev/doc/build/html
          retention-days: 5


# Deploy to branch
  deploy:
    name: Deploy to live branch
    needs: [site, api, cli]
    if: ${{ !failure() }}  # skipped needs are fine, but failures are not
    runs-on: ubuntu-latest
    steps:
      - name: Download Jekyll
        uses: actions/download-artifact@v2
        with:
          name: jekyll-output
          path: jekyll

      # Use New API
      - name: Download new API documentation
        if: needs.api.result == 'success'
        uses: actions/download-artifact@v2
        with:
          name: api-docs-output
          path: api/docs/api

      # Fallback to use current live API
      - name: Reuse current API documentation
        if: needs.api.result == 'skipped'
        uses: actions/checkout@v2
        with:
          ref: ${{ env.deploy }}
          path: api

      # Combine
      - name: Add API docs to website
        run:
          rsync -avh --size-only --delete api/docs/api/ jekyll/docs/api

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./jekyll
          keep_files: false
          publish_branch: ${{ env.deploy }}
          enable_jekyll: false # prevents GitHub running Jekyll
